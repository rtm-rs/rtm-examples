//! SeaORM Entity. Generated by sea-orm-codegen 0.8.0



use sea_orm :: entity :: prelude :: * ; use serde :: { Deserialize , Serialize } ;

# [derive (Copy , Clone , Default , Debug , DeriveEntity)] pub struct Entity ;

impl EntityName for Entity { fn table_name (& self) -> & str { "shipments" } }

# [derive (Clone , Debug , PartialEq , DeriveModel , DeriveActiveModel , Serialize , Deserialize)] pub struct Model { pub id : i64 , pub order_uid : String , pub address_line_1 : Option < String > , pub address_line_2 : Option < String > , pub address_line_3 : Option < String > , pub address_line_4 : Option < String > , }

# [derive (Copy , Clone , Debug , EnumIter , DeriveColumn)] pub enum Column { Id , OrderUid , AddressLine1 , AddressLine2 , AddressLine3 , AddressLine4 , }

# [derive (Copy , Clone , Debug , EnumIter , DerivePrimaryKey)] pub enum PrimaryKey { Id , }

impl PrimaryKeyTrait for PrimaryKey { type ValueType = i64 ; fn auto_increment () -> bool { true } }

# [derive (Copy , Clone , Debug , EnumIter)] pub enum Relation { }

impl ColumnTrait for Column { type EntityName = Entity ; fn def (& self) -> ColumnDef { match self { Self :: Id => ColumnType :: BigInteger . def () , Self :: OrderUid => ColumnType :: String (None) . def () , Self :: AddressLine1 => ColumnType :: String (None) . def () . null () , Self :: AddressLine2 => ColumnType :: String (None) . def () . null () , Self :: AddressLine3 => ColumnType :: String (None) . def () . null () , Self :: AddressLine4 => ColumnType :: String (None) . def () . null () , } } }

impl RelationTrait for Relation { fn def (& self) -> RelationDef { panic ! ("No RelationDef") } }

impl ActiveModelBehavior for ActiveModel { }