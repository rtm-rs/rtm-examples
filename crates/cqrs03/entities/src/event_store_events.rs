//! SeaORM Entity. Generated by sea-orm-codegen 0.8.0



use sea_orm :: entity :: prelude :: * ; use serde :: { Deserialize , Serialize } ;

# [derive (Copy , Clone , Default , Debug , DeriveEntity)] pub struct Entity ;

impl EntityName for Entity { fn table_name (& self) -> & str { "event_store_events" } }

# [derive (Clone , Debug , PartialEq , DeriveModel , DeriveActiveModel , Serialize , Deserialize)] pub struct Model { pub event_id : Uuid , pub event_type : String , pub metadata : Option < Json > , pub data : Json , pub created_at : DateTimeUtc , pub valid_at : Option < DateTimeUtc > , pub id : i32 , }

# [derive (Copy , Clone , Debug , EnumIter , DeriveColumn)] pub enum Column { EventId , EventType , Metadata , Data , CreatedAt , ValidAt , Id , }

# [derive (Copy , Clone , Debug , EnumIter , DerivePrimaryKey)] pub enum PrimaryKey { Id , }

impl PrimaryKeyTrait for PrimaryKey { type ValueType = i32 ; fn auto_increment () -> bool { true } }

# [derive (Copy , Clone , Debug , EnumIter)] pub enum Relation { }

impl ColumnTrait for Column { type EntityName = Entity ; fn def (& self) -> ColumnDef { match self { Self :: EventId => ColumnType :: Uuid . def () , Self :: EventType => ColumnType :: String (None) . def () , Self :: Metadata => ColumnType :: JsonBinary . def () . null () , Self :: Data => ColumnType :: JsonBinary . def () , Self :: CreatedAt => ColumnType :: Timestamp . def () , Self :: ValidAt => ColumnType :: Timestamp . def () . null () , Self :: Id => ColumnType :: Integer . def () , } } }

impl RelationTrait for Relation { fn def (& self) -> RelationDef { panic ! ("No RelationDef") } }

impl ActiveModelBehavior for ActiveModel { }