use std::error::Error as StdError;

use async_trait::async_trait;
use eventually::{aggregate, command, message, test};
use rust_decimal::Decimal;

use crate::domain::{
    BankAccount, BankAccountHolderId, BankAccountId, BankAccountRoot, Transaction,
};

use crate::{application, domain::BankAccountRepository};

#[derive(Clone)]
pub struct Application<R>
where
    R: eventually::aggregate::Repository<BankAccount, BankAccountRoot>,
{
    repository: R,
}

impl<R> From<R> for Application<R>
where
    R: eventually::aggregate::Repository<BankAccount, BankAccountRoot>,
{
    fn from(repository: R) -> Self {
        Self {
            repository,
        }
    }
}

impl<R> Application<R> {
    pub fn new() -> Self {
        let event_store = test::store::InMemory::default();
        let repository = BankAccountRepository::from(event_store.clone());
        let repository = Self::from(repository);
        Self { repository }
    }
}
